Basic JS Syntax
ES6+ features
Template literals
Object property shorthand
REST
Promises
Async/Await syntax
---------------------------------------------------------------------------------------------------------------------------------
Template Literals 
    - allow for multi-line strings and allow embedded expressions or tagged templates 
    `string text`

    `string text line 1
    string text line 2`

    `string text ${expression} string text`

    // Tagged, this calls the function "tagFunction" with the template as the
    // first argument and substitution values as subsequent arguments:
    tagFunction`string text ${expression} string text`

    let a = 5;
    let b = 10;
    console.log(`Fifteen is ${a + b} and
    not ${2 * a + b}.`);
---------------------------------------------------------------------------------------------------------------------------------
ES6 Features

    Let and Const 
        - before you had to define variables using "var" but now you can use "let". "Const" defines constants. 
        - Let cannot be used before declaration 

    Arrow functions
        - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions 
        - allows you to write function expressions better by removing the function and return keywords. 
        - do not have bindings to "this", "arguments" or super and should not be used as methods
        - not suitable for call, apply and bind methods or as a constructor 
        - No parameter () => 42; One parameter x => 42; Multiple parameters (x,y) => 42
      
        - if statements inside arrow function should be like this : 
         
            var feedTheCat = (cat) => {
                if (cat === 'hungry') {
                    return 'Feed the cat';
                } else {
                return 'Do not feed the cat';
                }
            }
        - multiple parameters or no parameters require parentheses; additional lines of processing will require parentheses and return function
        - Do not used Arrow functions for object methods, callback functions with dynamic context. 
        - Use when "this" is bounded to outer scope since "this" is not defined in an arrow function
        - for named functions, treat arrow expressions like variables 
        function bob (a){
            return a + 100;
        }

        // Arrow Function
        let bob = a => a + 100;

    Classes
        very similar to C++;
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes
        extends is like inheriting 
        Array method  .map() allows you to run a funciton on each item in the array and will return a new array with results
    
    Destructuring
        allows us to create an array structured from another array. 

        const vehicles = ['mustang', 'f-150', 'expedition'];
        const [car, truck, suv] = vehicles;
       
    Importing and Exporting
        import { name, age } from "./person.js";

        const name = "Jesse"
        const age = 40
        export { name, age }

    Ternary

    authenticated ? renderApp() : renderLogin(); means if authenticated render app, otherwise renderLogin

    Spread 
        const numbersOne = [1, 2, 3];
        const numbersTwo = [4, 5, 6];
        const numbersCombined = [...numbersOne, ...numbersTwo];
---------------------------------------------------------------------------------------------------------------------------------
Object Literal Property Shorthand 

let name = 'John Doe';
let email = 'john.doe@example.com';
let age = 25;

let user = { name, email, age };

---------------------------------------------------------------------------------------------------------------------------------